// Code generated by protoc-gen-go.
// source: calculator.proto
// DO NOT EDIT!

/*
Package calculator is a generated protocol buffer package.

It is generated from these files:
	calculator.proto

It has these top-level messages:
	AdditionRequest
	AdditionReply
*/
package calculator

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type AdditionRequest struct {
	Operand1 int64 `protobuf:"varint,1,opt,name=operand1" json:"operand1,omitempty"`
	Operand2 int64 `protobuf:"varint,2,opt,name=operand2" json:"operand2,omitempty"`
}

func (m *AdditionRequest) Reset()         { *m = AdditionRequest{} }
func (m *AdditionRequest) String() string { return proto.CompactTextString(m) }
func (*AdditionRequest) ProtoMessage()    {}

type AdditionReply struct {
	Result int64 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *AdditionReply) Reset()         { *m = AdditionReply{} }
func (m *AdditionReply) String() string { return proto.CompactTextString(m) }
func (*AdditionReply) ProtoMessage()    {}

func init() {
}

// Client API for Adder service

type AdderClient interface {
	Add(ctx context.Context, in *AdditionRequest, opts ...grpc.CallOption) (*AdditionReply, error)
}

type adderClient struct {
	cc *grpc.ClientConn
}

func NewAdderClient(cc *grpc.ClientConn) AdderClient {
	return &adderClient{cc}
}

func (c *adderClient) Add(ctx context.Context, in *AdditionRequest, opts ...grpc.CallOption) (*AdditionReply, error) {
	out := new(AdditionReply)
	err := grpc.Invoke(ctx, "/.Adder/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Adder service

type AdderServer interface {
	Add(context.Context, *AdditionRequest) (*AdditionReply, error)
}

func RegisterAdderServer(s *grpc.Server, srv AdderServer) {
	s.RegisterService(&_Adder_serviceDesc, srv)
}

func _Adder_Add_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(AdditionRequest)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(AdderServer).Add(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Adder_serviceDesc = grpc.ServiceDesc{
	ServiceName: ".Adder",
	HandlerType: (*AdderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Adder_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
